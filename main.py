import sys
import random
import math


class participant:
    def __init__(self):
        self.hand = []
        self.handSum = 0
        self.isSoft = False

    def drawCard(self, card, cardValues):
        self.hand.append(card)
        self.handSum += cardValues[card[0]]

        if card[0] == "A":
            if self.handSum > 21:
                self.handSum -= 10
            else:
                self.isSoft = True

        if self.isSoft and self.handSum > 21:
            self.handSum -= 10
            self.isSoft = False


def makeDecision(player: participant, dealer: participant, handMatrix):
    return handMatrix[(dealer.hand[0][0], player.handSum)]


def checkWinner(player: participant, dealer: participant, printOutput):
    if printOutput:
        print("Player: " + str(player.handSum))
        print("Player hand: " + str(player.hand))
        print("Dealer: " + str(dealer.handSum))
        print("Dealer hand: " + str(dealer.hand))
    if len(player.hand) == 2 and player.handSum == 21:
        return "Blackjack"
    elif player.handSum > 21:
        return "Loss"
    elif player.handSum == dealer.handSum:
        return "Push"
    elif player.handSum > dealer.handSum or dealer.handSum > 21:
        return "Win"
    else:
        return "Loss"


def buildDeck(numDecks, cutDecks):
    if numDecks <= cutDecks or numDecks < 1:
        print(
            "Number of decks must be at least 1 and greater than the number of cut decks."
        )
        sys.exit()
    if cutDecks < 0.5:
        print("Must cut at least 0.5 decks.")
        sys.exit()

    deck = []
    suits = ["Hearts", "Diamonds", "Clubs", "Spades"]
    cards = ["A", "K", "Q", "J", "10", "9", "8", "7", "6", "5", "4", "3", "2"]

    for suit in suits:
        for card in cards:
            deck.append([card, suit])

    deckSize = len(deck)
    if deckSize < 52:
        print("Decks should be at least 52 cards.")
        sys.exit()

    deck = numDecks * deck
    random.shuffle(deck)
    deck.insert(
        math.floor(random.uniform(-5, 5) + deckSize * (cutDecks)),
        ["Cut", "C"],
    )

    return deck


def playHand(deck, cardValues, hardHandMatrix, softHandMatrix, printOutput=False):
    dealer = participant()
    player = participant()

    player.drawCard(deck.pop(), cardValues)
    dealer.drawCard(deck.pop(), cardValues)
    player.drawCard(deck.pop(), cardValues)
    dealer.drawCard(deck.pop(), cardValues)

    if player.handSum == 21:
        return checkWinner(player, dealer, printOutput)

    # Player Decision Loop
    decision = ""
    while decision != "Stand":
        if player.isSoft:
            decision = makeDecision(player, dealer, softHandMatrix)
        else:
            decision = makeDecision(player, dealer, hardHandMatrix)

        # TEMPORARY ======================================================================
        if decision == "Hit" or decision == "Double":
            player.drawCard(deck.pop(), cardValues)

        if player.handSum > 21:
            return checkWinner(player, dealer, printOutput)

    # Dealer Decision Loop
    while True:
        if dealer.isSoft and dealer.handSum > 17:
            return checkWinner(player, dealer, printOutput)
        elif not dealer.isSoft and dealer.handSum > 16:
            return checkWinner(player, dealer, printOutput)
        else:
            dealer.drawCard(deck.pop(), cardValues)


if __name__ == "__main__":
    # print(buildDeck(numDecks=2, cutDecks=0.5)[20:30])
    cardValues = {
        "A": 11,
        "K": 10,
        "Q": 10,
        "J": 10,
        "10": 10,
        "9": 9,
        "8": 8,
        "7": 7,
        "6": 6,
        "5": 5,
        "4": 4,
        "3": 3,
        "2": 2,
    }

    hardHandMatrix = {
        ("A", 21): "Stand",
        ("K", 21): "Stand",
        ("Q", 21): "Stand",
        ("J", 21): "Stand",
        ("10", 21): "Stand",
        ("9", 21): "Stand",
        ("8", 21): "Stand",
        ("7", 21): "Stand",
        ("6", 21): "Stand",
        ("5", 21): "Stand",
        ("4", 21): "Stand",
        ("3", 21): "Stand",
        ("2", 21): "Stand",
        ("A", 20): "Stand",
        ("K", 20): "Stand",
        ("Q", 20): "Stand",
        ("J", 20): "Stand",
        ("10", 20): "Stand",
        ("9", 20): "Stand",
        ("8", 20): "Stand",
        ("7", 20): "Stand",
        ("6", 20): "Stand",
        ("5", 20): "Stand",
        ("4", 20): "Stand",
        ("3", 20): "Stand",
        ("2", 20): "Stand",
        ("A", 19): "Stand",
        ("K", 19): "Stand",
        ("Q", 19): "Stand",
        ("J", 19): "Stand",
        ("10", 19): "Stand",
        ("9", 19): "Stand",
        ("8", 19): "Stand",
        ("7", 19): "Stand",
        ("6", 19): "Stand",
        ("5", 19): "Stand",
        ("4", 19): "Stand",
        ("3", 19): "Stand",
        ("2", 19): "Stand",
        ("A", 18): "Stand",
        ("K", 18): "Stand",
        ("Q", 18): "Stand",
        ("J", 18): "Stand",
        ("10", 18): "Stand",
        ("9", 18): "Stand",
        ("8", 18): "Stand",
        ("7", 18): "Stand",
        ("6", 18): "Stand",
        ("5", 18): "Stand",
        ("4", 18): "Stand",
        ("3", 18): "Stand",
        ("2", 18): "Stand",
        ("A", 17): "Stand",
        ("K", 17): "Stand",
        ("Q", 17): "Stand",
        ("J", 17): "Stand",
        ("10", 17): "Stand",
        ("9", 17): "Stand",
        ("8", 17): "Stand",
        ("7", 17): "Stand",
        ("6", 17): "Stand",
        ("5", 17): "Stand",
        ("4", 17): "Stand",
        ("3", 17): "Stand",
        ("2", 17): "Stand",
        ("A", 16): "Hit",
        ("K", 16): "Hit",
        ("Q", 16): "Hit",
        ("J", 16): "Hit",
        ("10", 16): "Hit",
        ("9", 16): "Hit",
        ("8", 16): "Hit",
        ("7", 16): "Hit",
        ("6", 16): "Stand",
        ("5", 16): "Stand",
        ("4", 16): "Stand",
        ("3", 16): "Stand",
        ("2", 16): "Stand",
        ("A", 15): "Hit",
        ("K", 15): "Hit",
        ("Q", 15): "Hit",
        ("J", 15): "Hit",
        ("10", 15): "Hit",
        ("9", 15): "Hit",
        ("8", 15): "Hit",
        ("7", 15): "Hit",
        ("6", 15): "Stand",
        ("5", 15): "Stand",
        ("4", 15): "Stand",
        ("3", 15): "Stand",
        ("2", 15): "Stand",
        ("A", 14): "Hit",
        ("K", 14): "Hit",
        ("Q", 14): "Hit",
        ("J", 14): "Hit",
        ("10", 14): "Hit",
        ("9", 14): "Hit",
        ("8", 14): "Hit",
        ("7", 14): "Hit",
        ("6", 14): "Stand",
        ("5", 14): "Stand",
        ("4", 14): "Stand",
        ("3", 14): "Stand",
        ("2", 14): "Stand",
        ("A", 13): "Hit",
        ("K", 13): "Hit",
        ("Q", 13): "Hit",
        ("J", 13): "Hit",
        ("10", 13): "Hit",
        ("9", 13): "Hit",
        ("8", 13): "Hit",
        ("7", 13): "Hit",
        ("6", 13): "Stand",
        ("5", 13): "Stand",
        ("4", 13): "Stand",
        ("3", 13): "Stand",
        ("2", 13): "Stand",
        ("A", 12): "Hit",
        ("K", 12): "Hit",
        ("Q", 12): "Hit",
        ("J", 12): "Hit",
        ("10", 12): "Hit",
        ("9", 12): "Hit",
        ("8", 12): "Hit",
        ("7", 12): "Hit",
        ("6", 12): "Stand",
        ("5", 12): "Stand",
        ("4", 12): "Stand",
        ("3", 12): "Hit",
        ("2", 12): "Hit",
        ("A", 11): "Hit",
        ("K", 11): "Double",
        ("Q", 11): "Double",
        ("J", 11): "Double",
        ("10", 11): "Double",
        ("9", 11): "Double",
        ("8", 11): "Double",
        ("7", 11): "Double",
        ("6", 11): "Double",
        ("5", 11): "Double",
        ("4", 11): "Double",
        ("3", 11): "Double",
        ("2", 11): "Double",
        ("A", 10): "Hit",
        ("K", 10): "Hit",
        ("Q", 10): "Hit",
        ("J", 10): "Hit",
        ("10", 10): "Hit",
        ("9", 10): "Double",
        ("8", 10): "Double",
        ("7", 10): "Double",
        ("6", 10): "Double",
        ("5", 10): "Double",
        ("4", 10): "Double",
        ("3", 10): "Double",
        ("2", 10): "Double",
        ("A", 9): "Hit",
        ("K", 9): "Hit",
        ("Q", 9): "Hit",
        ("J", 9): "Hit",
        ("10", 9): "Hit",
        ("9", 9): "Hit",
        ("8", 9): "Hit",
        ("7", 9): "Hit",
        ("6", 9): "Double",
        ("5", 9): "Double",
        ("4", 9): "Double",
        ("3", 9): "Double",
        ("2", 9): "Hit",
        ("A", 8): "Hit",
        ("K", 8): "Hit",
        ("Q", 8): "Hit",
        ("J", 8): "Hit",
        ("10", 8): "Hit",
        ("9", 8): "Hit",
        ("8", 8): "Hit",
        ("7", 8): "Hit",
        ("6", 8): "Hit",
        ("5", 8): "Hit",
        ("4", 8): "Hit",
        ("3", 8): "Hit",
        ("2", 8): "Hit",
        ("A", 7): "Hit",
        ("K", 7): "Hit",
        ("Q", 7): "Hit",
        ("J", 7): "Hit",
        ("10", 7): "Hit",
        ("9", 7): "Hit",
        ("8", 7): "Hit",
        ("7", 7): "Hit",
        ("6", 7): "Hit",
        ("5", 7): "Hit",
        ("4", 7): "Hit",
        ("3", 7): "Hit",
        ("2", 7): "Hit",
        ("A", 6): "Hit",
        ("K", 6): "Hit",
        ("Q", 6): "Hit",
        ("J", 6): "Hit",
        ("10", 6): "Hit",
        ("9", 6): "Hit",
        ("8", 6): "Hit",
        ("7", 6): "Hit",
        ("6", 6): "Hit",
        ("5", 6): "Hit",
        ("4", 6): "Hit",
        ("3", 6): "Hit",
        ("2", 6): "Hit",
        ("A", 5): "Hit",
        ("K", 5): "Hit",
        ("Q", 5): "Hit",
        ("J", 5): "Hit",
        ("10", 5): "Hit",
        ("9", 5): "Hit",
        ("8", 5): "Hit",
        ("7", 5): "Hit",
        ("6", 5): "Hit",
        ("5", 5): "Hit",
        ("4", 5): "Hit",
        ("3", 5): "Hit",
        ("2", 5): "Hit",
        ("A", 4): "Hit",
        ("K", 4): "Hit",
        ("Q", 4): "Hit",
        ("J", 4): "Hit",
        ("10", 4): "Hit",
        ("9", 4): "Hit",
        ("8", 4): "Hit",
        ("7", 4): "Hit",
        ("6", 4): "Hit",
        ("5", 4): "Hit",
        ("4", 4): "Hit",
        ("3", 4): "Hit",
        ("2", 4): "Hit",
        ("A", 3): "Hit",
        ("K", 3): "Hit",
        ("Q", 3): "Hit",
        ("J", 3): "Hit",
        ("10", 3): "Hit",
        ("9", 3): "Hit",
        ("8", 3): "Hit",
        ("7", 3): "Hit",
        ("6", 3): "Hit",
        ("5", 3): "Hit",
        ("4", 3): "Hit",
        ("3", 3): "Hit",
        ("2", 3): "Hit",
        ("A", 2): "Hit",
        ("K", 2): "Hit",
        ("Q", 2): "Hit",
        ("J", 2): "Hit",
        ("10", 2): "Hit",
        ("9", 2): "Hit",
        ("8", 2): "Hit",
        ("7", 2): "Hit",
        ("6", 2): "Hit",
        ("5", 2): "Hit",
        ("4", 2): "Hit",
        ("3", 2): "Hit",
        ("2", 2): "Hit",
    }

    softHandMatrix = {
        ("A", 21): "Stand",
        ("K", 21): "Stand",
        ("Q", 21): "Stand",
        ("J", 21): "Stand",
        ("10", 21): "Stand",
        ("9", 21): "Stand",
        ("8", 21): "Stand",
        ("7", 21): "Stand",
        ("6", 21): "Stand",
        ("5", 21): "Stand",
        ("4", 21): "Stand",
        ("3", 21): "Stand",
        ("2", 21): "Stand",
        ("A", 20): "Stand",
        ("K", 20): "Stand",
        ("Q", 20): "Stand",
        ("J", 20): "Stand",
        ("10", 20): "Stand",
        ("9", 20): "Stand",
        ("8", 20): "Stand",
        ("7", 20): "Stand",
        ("6", 20): "Stand",
        ("5", 20): "Stand",
        ("4", 20): "Stand",
        ("3", 20): "Stand",
        ("2", 20): "Stand",
        ("A", 19): "Stand",
        ("K", 19): "Stand",
        ("Q", 19): "Stand",
        ("J", 19): "Stand",
        ("10", 19): "Stand",
        ("9", 19): "Stand",
        ("8", 19): "Stand",
        ("7", 19): "Stand",
        ("6", 19): "Stand",
        ("5", 19): "Stand",
        ("4", 19): "Stand",
        ("3", 19): "Stand",
        ("2", 19): "Stand",
        ("A", 18): "Stand",
        ("K", 18): "Stand",
        ("Q", 18): "Stand",
        ("J", 18): "Stand",
        ("10", 18): "Stand",
        ("9", 18): "Stand",
        ("8", 18): "Stand",
        ("7", 18): "Stand",
        ("6", 18): "Stand",
        ("5", 18): "Stand",
        ("4", 18): "Stand",
        ("3", 18): "Stand",
        ("2", 18): "Stand",
        ("A", 17): "Stand",
        ("K", 17): "Stand",
        ("Q", 17): "Stand",
        ("J", 17): "Stand",
        ("10", 17): "Stand",
        ("9", 17): "Stand",
        ("8", 17): "Stand",
        ("7", 17): "Stand",
        ("6", 17): "Stand",
        ("5", 17): "Stand",
        ("4", 17): "Stand",
        ("3", 17): "Stand",
        ("2", 17): "Stand",
        ("A", 16): "Hit",
        ("K", 16): "Hit",
        ("Q", 16): "Hit",
        ("J", 16): "Hit",
        ("10", 16): "Hit",
        ("9", 16): "Hit",
        ("8", 16): "Hit",
        ("7", 16): "Hit",
        ("6", 16): "Stand",
        ("5", 16): "Stand",
        ("4", 16): "Stand",
        ("3", 16): "Stand",
        ("2", 16): "Stand",
        ("A", 15): "Hit",
        ("K", 15): "Hit",
        ("Q", 15): "Hit",
        ("J", 15): "Hit",
        ("10", 15): "Hit",
        ("9", 15): "Hit",
        ("8", 15): "Hit",
        ("7", 15): "Hit",
        ("6", 15): "Stand",
        ("5", 15): "Stand",
        ("4", 15): "Stand",
        ("3", 15): "Stand",
        ("2", 15): "Stand",
        ("A", 14): "Hit",
        ("K", 14): "Hit",
        ("Q", 14): "Hit",
        ("J", 14): "Hit",
        ("10", 14): "Hit",
        ("9", 14): "Hit",
        ("8", 14): "Hit",
        ("7", 14): "Hit",
        ("6", 14): "Stand",
        ("5", 14): "Stand",
        ("4", 14): "Stand",
        ("3", 14): "Stand",
        ("2", 14): "Stand",
        ("A", 13): "Hit",
        ("K", 13): "Hit",
        ("Q", 13): "Hit",
        ("J", 13): "Hit",
        ("10", 13): "Hit",
        ("9", 13): "Hit",
        ("8", 13): "Hit",
        ("7", 13): "Hit",
        ("6", 13): "Stand",
        ("5", 13): "Stand",
        ("4", 13): "Stand",
        ("3", 13): "Stand",
        ("2", 13): "Stand",
        ("A", 12): "Hit",
        ("K", 12): "Hit",
        ("Q", 12): "Hit",
        ("J", 12): "Hit",
        ("10", 12): "Hit",
        ("9", 12): "Hit",
        ("8", 12): "Hit",
        ("7", 12): "Hit",
        ("6", 12): "Stand",
        ("5", 12): "Stand",
        ("4", 12): "Stand",
        ("3", 12): "Hit",
        ("2", 12): "Hit",
        ("A", 11): "Hit",
        ("K", 11): "Double",
        ("Q", 11): "Double",
        ("J", 11): "Double",
        ("10", 11): "Double",
        ("9", 11): "Double",
        ("8", 11): "Double",
        ("7", 11): "Double",
        ("6", 11): "Double",
        ("5", 11): "Double",
        ("4", 11): "Double",
        ("3", 11): "Double",
        ("2", 11): "Double",
        ("A", 10): "Hit",
        ("K", 10): "Hit",
        ("Q", 10): "Hit",
        ("J", 10): "Hit",
        ("10", 10): "Hit",
        ("9", 10): "Double",
        ("8", 10): "Double",
        ("7", 10): "Double",
        ("6", 10): "Double",
        ("5", 10): "Double",
        ("4", 10): "Double",
        ("3", 10): "Double",
        ("2", 10): "Double",
        ("A", 9): "Hit",
        ("K", 9): "Hit",
        ("Q", 9): "Hit",
        ("J", 9): "Hit",
        ("10", 9): "Hit",
        ("9", 9): "Hit",
        ("8", 9): "Hit",
        ("7", 9): "Hit",
        ("6", 9): "Double",
        ("5", 9): "Double",
        ("4", 9): "Double",
        ("3", 9): "Double",
        ("2", 9): "Hit",
        ("A", 8): "Hit",
        ("K", 8): "Hit",
        ("Q", 8): "Hit",
        ("J", 8): "Hit",
        ("10", 8): "Hit",
        ("9", 8): "Hit",
        ("8", 8): "Hit",
        ("7", 8): "Hit",
        ("6", 8): "Hit",
        ("5", 8): "Hit",
        ("4", 8): "Hit",
        ("3", 8): "Hit",
        ("2", 8): "Hit",
        ("A", 7): "Hit",
        ("K", 7): "Hit",
        ("Q", 7): "Hit",
        ("J", 7): "Hit",
        ("10", 7): "Hit",
        ("9", 7): "Hit",
        ("8", 7): "Hit",
        ("7", 7): "Hit",
        ("6", 7): "Hit",
        ("5", 7): "Hit",
        ("4", 7): "Hit",
        ("3", 7): "Hit",
        ("2", 7): "Hit",
        ("A", 6): "Hit",
        ("K", 6): "Hit",
        ("Q", 6): "Hit",
        ("J", 6): "Hit",
        ("10", 6): "Hit",
        ("9", 6): "Hit",
        ("8", 6): "Hit",
        ("7", 6): "Hit",
        ("6", 6): "Hit",
        ("5", 6): "Hit",
        ("4", 6): "Hit",
        ("3", 6): "Hit",
        ("2", 6): "Hit",
        ("A", 5): "Hit",
        ("K", 5): "Hit",
        ("Q", 5): "Hit",
        ("J", 5): "Hit",
        ("10", 5): "Hit",
        ("9", 5): "Hit",
        ("8", 5): "Hit",
        ("7", 5): "Hit",
        ("6", 5): "Hit",
        ("5", 5): "Hit",
        ("4", 5): "Hit",
        ("3", 5): "Hit",
        ("2", 5): "Hit",
        ("A", 4): "Hit",
        ("K", 4): "Hit",
        ("Q", 4): "Hit",
        ("J", 4): "Hit",
        ("10", 4): "Hit",
        ("9", 4): "Hit",
        ("8", 4): "Hit",
        ("7", 4): "Hit",
        ("6", 4): "Hit",
        ("5", 4): "Hit",
        ("4", 4): "Hit",
        ("3", 4): "Hit",
        ("2", 4): "Hit",
        ("A", 3): "Hit",
        ("K", 3): "Hit",
        ("Q", 3): "Hit",
        ("J", 3): "Hit",
        ("10", 3): "Hit",
        ("9", 3): "Hit",
        ("8", 3): "Hit",
        ("7", 3): "Hit",
        ("6", 3): "Hit",
        ("5", 3): "Hit",
        ("4", 3): "Hit",
        ("3", 3): "Hit",
        ("2", 3): "Hit",
        ("A", 2): "Hit",
        ("K", 2): "Hit",
        ("Q", 2): "Hit",
        ("J", 2): "Hit",
        ("10", 2): "Hit",
        ("9", 2): "Hit",
        ("8", 2): "Hit",
        ("7", 2): "Hit",
        ("6", 2): "Hit",
        ("5", 2): "Hit",
        ("4", 2): "Hit",
        ("3", 2): "Hit",
        ("2", 2): "Hit",
    }

    deck = buildDeck(2, 0.5)
    print(playHand(deck, cardValues, hardHandMatrix, softHandMatrix, printOutput=True))
